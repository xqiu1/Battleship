{"version":3,"sources":["components/Grid.js","components/Board.js","components/Game.js","App.js","reportWebVitals.js","index.js","utils/GameHelper.js"],"names":["Grid","handleGridClick","e","preventDefault","props","i","j","shipSet","handleFire","handlePlaceShip","showLabel","label","square","this","style","width","height","disabled","status","onMouseDown","onKeyUp","keyCode","React","Component","Board","state","checkedH","row","col","currentPlayer","currentPlayerName","opponentName","updateGame","validateLocation","ship","size","position","push","forEach","board","message","error","opponent","hits","success","info","showBoard","map","rowData","justify","handleCheckbox","setState","prevState","action","type","marginTop","checked","onChange","margin","Game","player1","createPlayer","player2","gameStart","gameOver","winner","playerName","payload","allShipsPlaced","whoIsOpponent","gameState","title","subTitle","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","columns","boardGenerator","BOARD_SIZE","module","exports","player","isHorizontal"],"mappings":"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","file":"static/js/main.2c446885.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"antd\";\nimport { RiSpaceShipLine } from \"react-icons/ri\";\nimport { FaBomb } from \"react-icons/fa\";\n\nexport default class Grid extends React.Component {\n  handleGridClick = (e) => {\n    // Remove focus for clicked button\n    if (e) {\n      e.preventDefault();\n    }\n\n    const { i, j, shipSet, handleFire, handlePlaceShip } = this.props;\n    if (shipSet) {\n      return handleFire(i, j);\n    } else {\n      return handlePlaceShip(i, j);\n    }\n  };\n\n  /**\n   * Replace the label of the grid by icon\n   * @param {*} label\n   * @returns icon or string\n   */\n  showLabel = (label) => {\n    if (label === \"S\") {\n      return <RiSpaceShipLine />;\n    } else if (label === \"X\") {\n      return <FaBomb />;\n    }\n    return label;\n  };\n\n  render() {\n    const { square } = this.props;\n\n    return (\n      <Button\n        style={{\n          width: 42,\n          height: 42,\n        }}\n        disabled={square.status === \"label\"}\n        onMouseDown={this.handleGridClick}\n        onKeyUp={(e) => {\n          if (e.keyCode === 13 || e.keyCode === 32) {\n            this.handleGridClick();\n          }\n        }}\n      >\n        {this.showLabel(square.label)}\n      </Button>\n    );\n  }\n}\n","import React from \"react\";\nimport { Row, Col, message, Checkbox, Alert } from \"antd\";\nimport Grid from \"./Grid\";\nimport { validateLocation } from \"../utils/GameHelper\";\n\nexport default class Board extends React.Component {\n  state = {\n    checkedH: true,\n  };\n\n  handlePlaceShip = (row, col) => {\n    const { currentPlayer, currentPlayerName, opponentName, updateGame } =\n      this.props;\n\n    // Check if the ship is placed inside the board\n    if (validateLocation(row, col, this.state.checkedH)) {\n      // Add ship position\n      for (let i = 0; i < currentPlayer.ship.size; i++) {\n        if (this.state.checkedH) {\n          currentPlayer.ship.position.push([row, col + i]);\n        } else {\n          currentPlayer.ship.position.push([row + i, col]);\n        }\n      }\n\n      currentPlayer.ship.position.forEach(([row, col]) => {\n        currentPlayer.board[row][col].label = \"S\";\n      });\n\n      currentPlayer.shipSet = true;\n\n      updateGame(\"PlaceShip\", currentPlayerName, opponentName, currentPlayer);\n    } else {\n      message.error(\"You can not place your ship outside the board!\");\n    }\n  };\n\n  /**\n   * Player can select a location to fire.\n   * The location marked \"X\" if it has been fired.\n   * A hit is when a ship part is in a grid unit that a player fires at.\n   * Otherwise, print Miss.\n   * @param {*} row\n   * @param {*} col\n   * @returns\n   */\n  handleFire = (row, col) => {\n    const { currentPlayerName, opponent, opponentName, updateGame } =\n      this.props;\n    if (opponent.board[row][col].label === \"X\") {\n      message.error(\"You have already fired this location before!\");\n      return null;\n    } else {\n      if (opponent.board[row][col].label === \"S\") {\n        opponent.board[row][col].label = \"X\";\n        opponent.ship.hits += 1;\n        updateGame(\"Fire\", currentPlayerName, opponentName, opponent);\n        message.success(\"Hit!\");\n        if (opponent.ship.hits === opponent.ship.size) {\n          updateGame(\"GameOver\", currentPlayerName, opponentName, {});\n        }\n      } else {\n        opponent.board[row][col].label = \"X\";\n        updateGame(\"Fire\", currentPlayerName, opponentName, opponent);\n        message.info(\"Miss.\");\n      }\n    }\n  };\n\n  /**\n   * Columns are labeled A to H.\n   * Rows are labeled 1 to 8.\n   * @param {*} board\n   * @returns\n   */\n  showBoard = (board) => {\n    return board.map((row, i) => {\n      const rowData = row.map((square, j) => {\n        return (\n          <Col>\n            <Grid\n              key={`${i}${j}`}\n              i={i}\n              j={j}\n              square={square}\n              shipSet={this.props.currentPlayer.shipSet}\n              handleFire={this.handleFire}\n              handlePlaceShip={this.handlePlaceShip}\n            />\n          </Col>\n        );\n      });\n      return <Row justify=\"center\">{rowData}</Row>;\n    });\n  };\n\n  handleCheckbox = () => {\n    this.setState((prevState) => ({\n      checkedH: !prevState.checkedH,\n    }));\n  };\n\n  render() {\n    const { board, currentPlayer, currentPlayerName, opponentName } =\n      this.props;\n\n    const action = currentPlayer.shipSet ? (\n      <Alert\n        message={`Please click a location to hit ${opponentName}'s ship`}\n        type=\"info\"\n      />\n    ) : (\n      <div>\n        <Alert\n          message={`Please click the initial ship location for ${currentPlayerName}`}\n          type=\"info\"\n        />\n        <div style={{ marginTop: 24 }}>\n          Place the ship:{\" \"}\n          <Checkbox\n            checked={this.state.checkedH}\n            onChange={this.handleCheckbox}\n          >\n            Horizontally\n          </Checkbox>\n          <Checkbox\n            checked={!this.state.checkedH}\n            onChange={this.handleCheckbox}\n          >\n            Vertically\n          </Checkbox>\n        </div>\n      </div>\n    );\n\n    return (\n      <div>\n        <h1>\n          {currentPlayerName} <span>✨</span>\n        </h1>\n        <div style={{ margin: 36 }}>{action}</div>\n        {this.showBoard(board)}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { PageHeader } from \"antd\";\nimport { createPlayer, whoIsOpponent } from \"../utils/GameHelper\";\nimport Board from \"./Board\";\n\nexport default class Game extends React.Component {\n  state = {\n    currentPlayer: \"player1\",\n    player1: createPlayer(),\n    player2: createPlayer(),\n    gameStart: false,\n    gameOver: false,\n    winner: null,\n  };\n\n  /**\n   * Update game states\n   * @param {*} action\n   * @param {*} playerName\n   * @param {*} opponentName\n   * @param {*} payload\n   */\n  updateGame = (action, playerName, opponentName, payload) => {\n    if (action === \"GameOver\") {\n      this.setState({\n        winner: playerName,\n        gameOver: true,\n        currentPlayer: playerName,\n      });\n    } else if (action === \"PlaceShip\") {\n      this.setState({\n        [playerName]: payload,\n        currentPlayer: opponentName,\n      });\n    } else {\n      // Fire\n      this.setState({\n        [opponentName]: payload,\n        currentPlayer: opponentName,\n      });\n    }\n  };\n\n  render() {\n    const { currentPlayer, gameOver, allShipsPlaced } = this.state;\n    const opponent = whoIsOpponent(currentPlayer);\n\n    const gameState = gameOver ? (\n      <h1>\n        Congratulations {currentPlayer} <span>🎉</span> you sunk {opponent}'s\n        battleship.\n      </h1>\n    ) : (\n      <Board\n        board={this.state[currentPlayer].board}\n        currentPlayer={this.state[currentPlayer]}\n        currentPlayerName={currentPlayer}\n        opponent={this.state[opponent]}\n        opponentName={opponent}\n        allShipsPlaced={allShipsPlaced}\n        updateGame={this.updateGame}\n      />\n    );\n\n    return (\n      <div>\n        <PageHeader title=\"Battleship\" subTitle=\"a simple implementation\" />\n        {gameState}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const BOARD_SIZE = 8;\nconst SHIP_SIZE = 3;\n\nconst columns = {\n  0: \" \",\n  1: \"A\",\n  2: \"B\",\n  3: \"C\",\n  4: \"D\",\n  5: \"E\",\n  6: \"F\",\n  7: \"G\",\n  8: \"H\",\n};\n\n/**\n * Create a ship for a player\n * Each player has one ship that is 3 grid units in length.\n * Ship can be placed on the board either vertically (\"V\") or horizontally (\"H\").\n * @returns an object stores the information of a ship\n */\nconst makeShip = () => {\n  return {\n    size: SHIP_SIZE,\n    position: [],\n    hits: 0,\n  };\n};\n\n/**\n * Generate a board for a player\n * Board status: label or grid\n * Board label: _(whitespace), S, X\n * @returns an array stores the information of a board\n */\nconst boardGenerator = () => {\n  let board = [];\n  let length = BOARD_SIZE + 1;\n  for (let i = 0; i < length; i++) {\n    let row = [];\n    for (let j = 0; j < length; j++) {\n      if (i === 0) {\n        row.push({ status: \"label\", label: columns[j] });\n      } else if (i !== 0 && j === 0) {\n        row.push({ status: \"label\", label: i });\n      } else {\n        row.push({ status: \"grid\", label: \" \" });\n      }\n    }\n    board.push(row);\n  }\n  return board;\n};\n\n/**\n * Create a player\n * @returns an object stores the information of a player\n */\nconst createPlayer = () => {\n  return {\n    board: boardGenerator(),\n    ship: makeShip(),\n    shipSet: false,\n  };\n};\n\n/**\n * @param {*} player\n * @returns the opponent name of the current player\n */\nconst whoIsOpponent = (player) => {\n  return player === \"player1\" ? \"player2\" : \"player1\";\n};\n\n/**\n * Validate the location of ship\n * @param {*} row\n * @param {*} col\n * @param {*} isHorizontal\n * @returns true if location is valid (the ship can be placed inside the board)\n */\nconst validateLocation = (row, col, isHorizontal) => {\n  if (isHorizontal) {\n    return col + SHIP_SIZE - 1 < BOARD_SIZE + 1;\n  } else {\n    return row + SHIP_SIZE - 1 < BOARD_SIZE + 1;\n  }\n};\n\nmodule.exports = {\n  createPlayer,\n  whoIsOpponent,\n  validateLocation,\n};\n"],"sourceRoot":""}